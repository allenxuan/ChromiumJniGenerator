// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     /Users/bytedance/Desktop/AndroidProject/ChromiumJniGenerator/demo-app/src/main/chromium-jni-generator-native-gen-script/jni_generator.py
// For
//     org/chromium/chromiumjnigenerator/ChromiumJniTestA

#ifndef org_chromium_chromiumjnigenerator_ChromiumJniTestA_JNI
#define org_chromium_chromiumjnigenerator_ChromiumJniTestA_JNI

#include <jni.h>
#include <chromium_jni_generator_native_essential.h>



// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chromiumjnigenerator_ChromiumJniTestA[];
const char kClassPath_org_chromium_chromiumjnigenerator_ChromiumJniTestA[] =
    "org/chromium/chromiumjnigenerator/ChromiumJniTestA";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz(nullptr);
#ifndef org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz_defined
#define org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz_defined
inline jclass org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz(JNIEnv* env) {
  return chromium::android::LazyGetClass(env,
      kClassPath_org_chromium_chromiumjnigenerator_ChromiumJniTestA,
      &g_org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jboolean JNI_ChromiumJniTestA_FunctionAA(JNIEnv* env, jboolean param1,
    jfloat param2);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_chromiumjnigenerator_ChromiumJniTestA_nativeFunctionAA(
    JNIEnv* env,
    jclass jcaller,
    jboolean param1,
    jfloat param2) {
  return JNI_ChromiumJniTestA_FunctionAA(env, param1, param2);
}

static jlong JNI_ChromiumJniTestA_FunctionAC(JNIEnv* env, const
    chromium::android::JavaParamRef<jobject>& jcaller,
    const chromium::android::JavaParamRef<jstring>& param1);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_chromiumjnigenerator_ChromiumJniTestA_nativeFunctionAC(
    JNIEnv* env,
    jobject jcaller,
    jstring param1) {
  return JNI_ChromiumJniTestA_FunctionAC(env, chromium::android::JavaParamRef<jobject>(env,
      jcaller), chromium::android::JavaParamRef<jstring>(env, param1));
}


static std::atomic<jmethodID>
    g_org_chromium_chromiumjnigenerator_ChromiumJniTestA_functionAE(nullptr);
static jfloat Java_ChromiumJniTestA_functionAE(JNIEnv* env, const
    chromium::android::JavaRef<jstring>& param1,
    jboolean param2) {
  jclass clazz = org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chromiumjnigenerator_ChromiumJniTestA_clazz(env), 0);

  chromium::android::JniJavaCallContextChecked call_context;
  call_context.Init<
      chromium::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "functionAE",
          "(Ljava/lang/String;Z)F",
          &g_org_chromium_chromiumjnigenerator_ChromiumJniTestA_functionAE);

  jfloat ret =
      env->CallStaticFloatMethod(clazz,
          call_context.base.method_id, param1.obj(), param2);
  return ret;
}

#endif  // org_chromium_chromiumjnigenerator_ChromiumJniTestA_JNI
